###  Publishing MyWord Documents

The previous sections of this guide focus on how to compose MyWord content. The next step is to "publish" that content so it can be rendered in a Web page on a browser. Each MyWord document starts with a "root" MyWord file (type `.myw`) which then includes (or imports) other files as needed. But, unlike `.html` and a few other file types, browsers don't recognize `.myw` files as content that can be rendered. So each MyWord document requires a "host" `.html` file to bridge this gap. In addition to referencing the MyWord document root, it loads the MyWord application software to perform the translation on the document contents.

aside> Aside: A frequently used alternative model is to "compile" markup source to HTML and publish that. A MyWord compiler could be built (using the extended `markit` API functions) but the tradeoff seems to be extra browser processing vs. an extra processing step when making document changes. In addition, compiler changes need to be vetted to see if content needs to be recompiled. Browser performance does not seem to be a significant issue, even on documents this size. On balance, it seems easier just to put any modified content, or translator software, on the server and be done with it.

A minimal HTML host looks like:
eg
	<!DOCTYPE HTML>
	<html>
	<head>
		<meta lang=en charset="UTF-8">
		<script src='lib/x-markup.js'></script>
	</head>
	<body>
		<div class=x-markup src=myMyWordDoc.myw></div>
	</body>
	</html>
The `src` attributes in `<script>` and `<div>` elements reference the MyWord application software and root document file respectively. When the application is loaded, it will:
1..
	*  Initialize the `markit` Web Worker with the default lingo.
	*  Scan the `<body>` element for any `<div>` elements with a `class` value of `x-markup`.
	*  For each such element send a message to the Worker to `include` the file named by the `src` attribute.
	*  When the Worker returns the result of the translation, replace the contents of `<div>` element with the result.
	
The messaging protocol between the application and the Worker is shown below:
@include
	MUG_messages.box
*  `id` is the id attribute of the element being translated (one will be generated automatically if none exists); the same `id` is returned in the response.
*  `content` is the original content of the element; `generatedHTML` from the response replaces that content.
*  `typeName` specifies the type of the `content`.
*  `contextID` specifies the meta-context of the element being translated (if it has one). The value is retrieved from the closest ancestor with a context value (see type `scope`.) Other than dynamic content, this value will be 0.
*  `basePath` is base URL of the MyWord "root" file to be used as the initial base for relative pathnames.

The `<div class='x-markup' src='myMyWordDoc.myw'>` element is interpreted as `typeName = 'include'` and `content = 'myMyWordDoc.myw'`. This can be used to load and translate any file type if the type's transform is predefined or defined in the default lingo, currently file types `.myw` and `.txt`. Additional types can be added by editing `x-markup.mmk`.

The simple host file results in a Web page with only the MyWord content (`myMyWordDoc.myw`) but the `<div class='x-markup'>` element can be embedded in any HTML `<body>` content. The host could even embed multiple MyWord documents - these would share the same default lingo, but would be otherwise independent, e.g., no shared place-holder definitions. (Of course, those could be defined in a separate package which could then be shared.)

The MyWord application software is packaged in the `lib/` directory referenced from the `<script>` element. This directory can be anywhere named by the `src` URL, but the four files must be in the same directory.
.box
		lib/
		|
		|-- grit.js           // the Grit grammar parser tool, loaded by markit.js
		|
		|-- markit.js         // the Worker script, loaded by x-markup.js
		|
		|-- x-markup.js       // MyWord application loaded by the host file script element
		|
		|-- x-markup.mmk      // the default lingo loaded by markit.js as requested from x-markup.js
		|
		'-- commonmark.min.js // reference implementation of CommonMark, imported by x-markup.mmk
		
&
	.box .. <- box
The HTML host file is small and simple enough that it could be automatically generated by a server in response to a URL directly referencing the MyWord document root file a) using conventional CGI mechanisms, or b) using a custom local server. Local file access, i.e., opening the HTML file using the OS GUI or Terminal application, can be problematical due to browser security policy, including that on cross-origin requests. Solutions to this problem are beyond the scope of this document and setting up a private server to host MyWord content during development is often the easiest way out.

MyWord has no footprint in the main thread's `window` global space other than as a `load` event handler. Dynamic content (like the interactive demos) can be supported through a 'message' event on the `window` which will send requests to the Worker for translation (see the next section).

<#TableOfContents>


