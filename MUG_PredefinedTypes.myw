###  Predefined MyWord Types

The core MyWord translator predefines a number of types as described earlier in this guide and summarized in the the following diagram:
@include
	MyWordTypes.box
The boxes labelled 'TYPE' designate places where the type is dependent on the notation, so it can be any of the types currently defined, i.e., predefined, or defined using `metamark`.

In addition to type `external`, which was covered in a previous section, there a couple of core types that are not shown in the diagram. An `errorString` may be generated by any transform, rather than the nominal output, if it encounters an unexpected condition. A trivial example:
demo
	$(6*7)$ days left but the price is still $$('On Sale')$.
	&
		$( .. )$  <- numeric
		numeric :: (string) => (
		               (n) => Number.isNaN(n)? markit('errorString',`${string} is not a number.`):n.toString()
		             )(parseFloat(eval(string)))

The default type definition is:
eg
	errorString :: (content) => {
	             if (console) console.error('markit: ' + content)
	             return `<pre><mark style='color:blue'>*** Error *** ${markit('text', content)}</mark></pre>`
	           }

The other core type not shown is `scope` representing the "scope" of a set of `metamark` definitions and is used to mark a block of output corresponding to a `myword` scope. This marking will be defined by `scope`'s transform function. This type will seldom, if ever, be used by any other notation, but it is documented here for completeness.

The "core" translator provides definitions, i.e., transforms, for all the predefined types. Transforms for terminal types, like `insetblock`, `text`, `ctrl`, and `blankline` just output plain text equivalents so, in the absence of any lingo, the output is the same as the input content. In MyWord, the default lingo defines how all HTML is produced, so changing that lingo could generate other output forms, e.g., JSON (JavaScript Object Notation) or RTF (Rich Text Format).

<#TableOfContents>


