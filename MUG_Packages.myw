###  Packages with MyWord

A package is a file of type `metamark` (suffix `.mmk`) that documents can import to augment any custom sub-lingos defined in the document. Like style sheets, packages can be shared among documents to encourage a common authoring style based on the same notations. The packages included in the MyWord release (directory `pkgs/`) not only provide some useful functionality but also serve as examples to demonstrate more advanced ways, e.g., Grit grammars, of using the `metamark` language. Packages are imported using the `metamark @import` statement and any definitions have the same scope as the block containing the `@import`.

The package documentation for this section is actually contained in the package files themselves using the `metamark @doc` statement. When importing packages, the documentation can be rendered by overriding the default `metadoc` type definition:
eg
	metadoc :: (doc) => markit('myword', doc)
	
Some of the packages, e.g., `tsv.mmk` and `ascimmath.mmk`, are examples of using Grit grammars in parsing content.

.myw
	&
		// Display the documentation contained in the various packages.
		metadoc :: (doc) => markit('myword', doc)
		@import pkgs/tsv.mmk
	The example from Wikipedia:
	demo
		@include
			MUG_extra/Iris_flower_data_set.tsv
		&
			@css
				table.my_array { border-collapse:collapse; }
				table.my_array tr td { background:whitesmoke; padding: 4px 16px; font-size:smaller }
				table.my_array tr:nth-child(1) td { background:lightgray; font-weight: bold }

	&
		@import pkgs/box.mmk
		@import pkgs/asciimath.mmk
	While MathML is part of HTML5, its support in browsers is somewhat uneven to say the least; Firefox has a fairly complete implementation, while Chrome has nothing. As a workaround, [MathJax] can be used to translate (at a cost) MathML to conventional HTML. Using the MathJax option to translate MathML requires the following `<script>` (or equivalent) to be paced in the head of the host HTML file:
	eg
		<script type="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=MML_HTMLorMML"></script>
	When MathJax is detected, `x-markup.js` will invoke it to post-process any MathML present in HTML generated by MyWord. The MathJax configuration specified above will use MathML in browsers where it is well supported, but otherwise convert it to HTML-CSS.
	
	&
		[MathJax] <- link https://www.mathjax.org/
		@import pkgs/critic.mmk
		@import pkgs/toc.mmk
		@import pkgs/demo.mmk
	While this sounds complicated, and in some sense it is, the JavaScript code is not large (less than 40 lines for `MyWordEditable` and less than 50 lines for `MyWordSink`); see the package source file (`demo.mmk`) for the details.

####  Third Party Transforms
Many JavaScript modules provide global functions that can be used in type definitions. The main constraint is that they can't depend on anything that isn't available in a Web Worker environment. In some case a wrapper function can be used to map the MyWord transform API (` (contentString, parameterString) ==> outputString `) onto the arguments defined by the third party function. Here's a short list of some third party transforms that can be used in this fashion:
.tsv
	Software		Source Content			Example Type Defintion
	[`Rimu`]		Rimu markup language	`rimu :: (content) => Rimu.render(content)`
	[`Viz`]			`dot` graphs			`gv :: (content) => Viz(content)`
	[`highlight`]	Syntax colouring		`highlight :: (content) => hljs.highlightAuto(content).value`
	[`js-beautify`]	JavaScript reformatter	`(jsformat :: (content) => `<pre>${js_beautify(content)}</pre>`)`
Note: The `js-beautify` package also contains reformatters for HTML and CSS.

Reformatting and syntax colouring can be combined:
demo
	&
		@import 3rdparty/Beautify/beautify.fw.js 3rdparty/Beautify/highlight.pack.js stylesheets/xcode.min.css
		.JS .. <- JavaScript
		JavaScript :: (content) => `<pre>${hljs.highlightAuto(js_beautify(content)).value}</pre>`
	.JS
		// Browser feature status
		function noArrow() {
			var arrow = true
			try { eval('(() => true)') } catch (err) { arrow = false } 
			return !arrow
		} // noArrow()
		console.log([ 'Arrow functions are ', 
		              noArrow() ? 'NOT ' : '',
		              'supported in this browser.'
		            ].join(''))

&
	[`Rimu`]        <- link https://github.com/srackham/rimu
	[`Viz`]         <- link https://github.com/mdaines/viz.js
	[`highlight`]   <- link https://highlightjs.org/
	[`js-beautify`] <- link https://github.com/beautify-web/js-beautify
	
<#TableOfContents>


